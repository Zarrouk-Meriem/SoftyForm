import { appConfig } from '../../config/app.js';
import { triggerIconSetsUpdate } from '../../data/icon-sets.js';
import { runWhenLoaded } from '../../data/loading.js';
let pendingUpdate = false;
let lastError = 0;
const envKey = 'APP_UPDATE_SECRET';
function logError(msg) {
    const time = Date.now();
    // Do not log error too often
    if (time > lastError + 3600000) {
        lastError = time;
        console.error(msg);
    }
}
function checkKey(query) {
    if (appConfig.updateRequiredParam) {
        const expectedValue = process.env[envKey];
        if (!expectedValue) {
            // Missing env variable
            logError(`Cannot process update request: missing env variable "${envKey}"`);
            return false;
        }
        const value = query[appConfig.updateRequiredParam];
        if (value !== expectedValue) {
            return false;
        }
        // Success
        return true;
    }
    // No param
    logError('Auto-update can be triggered by anyone. Set `updateRequiredParam` config or UPDATE_REQUIRED_PARAM env variable to require secret to trigger update');
    return true;
}
/**
 * Generate icons data
 */
export function generateUpdateResponse(query, res) {
    if (appConfig.allowUpdate && checkKey((query || {})) && !pendingUpdate) {
        pendingUpdate = true;
        runWhenLoaded(() => {
            const delay = appConfig.updateThrottle;
            console.log('Will check for update in', delay, 'seconds...');
            setTimeout(() => {
                triggerIconSetsUpdate();
                pendingUpdate = false;
            }, delay * 1000);
        });
    }
    // Send same message regardless of status
    res.send('ok');
}
