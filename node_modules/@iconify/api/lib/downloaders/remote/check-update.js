import { execAsync } from '@iconify/tools/lib/misc/exec';
import { getGitHubRepoHash } from '@iconify/tools/lib/download/github/hash';
import { getGitLabRepoHash } from '@iconify/tools/lib/download/gitlab/hash';
import { getNPMVersion, getPackageVersion } from '@iconify/tools/lib/download/npm/version';
import { directoryExists } from '../../misc/files.js';
/**
 * Check git repo for update
 */
export async function isGitUpdateAvailable(options, oldVersion) {
    const result = await execAsync(`git ls-remote ${options.remote} --branch ${options.branch}`);
    const parts = result.stdout.split(/\s/);
    const hash = parts.shift();
    if (hash !== oldVersion.hash || !(await directoryExists(oldVersion.contentsDir))) {
        const newVerison = {
            ...oldVersion,
            hash,
        };
        return newVerison;
    }
    return false;
}
/**
 * Check GitHub repo for update
 */
export async function isGitHubUpdateAvailable(options, oldVersion) {
    const hash = await getGitHubRepoHash(options);
    if (hash !== oldVersion.hash || !(await directoryExists(oldVersion.contentsDir))) {
        const newVerison = {
            ...oldVersion,
            hash,
        };
        return newVerison;
    }
    return false;
}
/**
 * Check GitLab repo for update
 */
export async function isGitLabUpdateAvailable(options, oldVersion) {
    const hash = await getGitLabRepoHash(options);
    if (hash !== oldVersion.hash || !(await directoryExists(oldVersion.contentsDir))) {
        const newVerison = {
            ...oldVersion,
            hash,
        };
        return newVerison;
    }
    return false;
}
/**
 * Check NPM package for update
 */
export async function isNPMUpdateAvailable(options, oldVersion) {
    const { version } = await getNPMVersion(options);
    const dir = oldVersion.contentsDir;
    if (version !== oldVersion.version || !(await directoryExists(dir)) || (await getPackageVersion(dir)) !== version) {
        const newVerison = {
            ...oldVersion,
            version,
        };
        return newVerison;
    }
    return false;
}
