import type { DownloaderStatus, DownloaderType } from '../types/downloaders/base.js';
/**
 * loadDataFromDirectory()
 */
type DataUpdated<DataType> = (data: DataType) => Promise<unknown>;
/**
 * loadDataFromDirectory()
 */
type LoadData<DataType> = () => Promise<DataType | void | undefined>;
/**
 * loadDataFromDirectory()
 */
type LoadDataFromDirectory<DataType> = (path: string) => Promise<DataType | void | undefined>;
/**
 * Base downloader class, shared with all child classes
 */
export declare abstract class BaseDownloader<DataType> {
    type: DownloaderType;
    status: DownloaderStatus;
    data?: DataType;
    _pendingReload: boolean;
    /**
     * Load data from custom source, should be overwrtten by loader
     *
     * Used by loaders that do not implement _loadDataFromDirectory()
     */
    _loadData?: LoadData<DataType>;
    /**
     * Load data from directory, should be overwritten by loader
     *
     * Used by loaders that do not implement _loadData()
     */
    _loadDataFromDirectory?: LoadDataFromDirectory<DataType>;
    /**
     * Function to call when data has been updated
     */
    _dataUpdated?: DataUpdated<DataType>;
    /**
     * Load content. Called when content is ready to be loaded, should be overwritten by child classes
     */
    _loadContent(): Promise<void>;
    /**
     * Initialise downloader
     *
     * Returns true on success, false or reject on fatal error.
     */
    _init(): Promise<boolean>;
    /**
     * Initialise downloader
     *
     * Returns false on error
     */
    init(): Promise<boolean>;
    /**
     * Check for update
     *
     * Function should update latest version value before calling done(true)
     * All errors should be caught and callbac must finish. In case of error, return done(false)
     */
    _checkForUpdate(done: (value: boolean) => void): void;
    /**
     * Promise wrapper for _checkForUpdate()
     */
    _checkForUpdateLoop(): Promise<boolean>;
    /**
     * Check for update
     */
    checkForUpdate(): Promise<boolean>;
}
export {};
