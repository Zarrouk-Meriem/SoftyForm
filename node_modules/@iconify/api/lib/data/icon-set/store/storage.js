import { appConfig, splitIconSetConfig, storageConfig } from '../../../config/app.js';
import { createSplitRecordsTree, splitRecords } from '../../storage/split.js';
import { createStorage, createStoredItem } from '../../storage/create.js';
import { getIconSetSplitChunksCount, splitIconSetMainData } from './split.js';
import { removeBadIconSetItems } from '../lists/validate.js';
import { prepareAPIv2IconsList } from '../lists/icons-v2.js';
import { generateIconSetIconsTree } from '../lists/icons.js';
import { themeKeys, findIconSetThemes } from './themes.js';
/**
 * Storage
 */
export const iconSetsStorage = createStorage(storageConfig);
/**
 * Counter for prefixes
 */
let counter = Date.now();
/**
 * Split and store icon set
 */
export function storeLoadedIconSet(iconSet, done, 
// Optional parameters, can be changed if needed
storage = iconSetsStorage, config = splitIconSetConfig) {
    let themes;
    let themeParts;
    if (appConfig.enableIconLists) {
        // Get themes
        if (appConfig.enableIconLists) {
            const themesList = {};
            for (let i = 0; i < themeKeys.length; i++) {
                const key = themeKeys[i];
                if (iconSet[key]) {
                    themesList[key] = iconSet[key];
                    themes = themesList;
                }
            }
            // Get common parts of icon names for optimised search
            if (appConfig.enableSearchEngine) {
                const data = findIconSetThemes(iconSet);
                if (data.length) {
                    themeParts = data;
                }
            }
        }
    }
    // Get icons
    const icons = generateIconSetIconsTree(iconSet, themeParts);
    removeBadIconSetItems(iconSet, icons);
    // Fix icons counter
    if (iconSet.info) {
        iconSet.info.total = icons.total;
    }
    // Get common items
    const common = splitIconSetMainData(iconSet);
    // Get number of chunks
    const chunksCount = getIconSetSplitChunksCount(iconSet.icons, config);
    // Stored items
    const splitItems = [];
    const storedItems = [];
    // Split
    const cachePrefix = `${iconSet.prefix}.${counter++}.`;
    splitRecords(iconSet.icons, chunksCount, (splitIcons, next, index) => {
        // Store data
        createStoredItem(storage, splitIcons.data, cachePrefix + index, true, (storedItem) => {
            // Create split record for stored item
            const storedSplitItem = {
                keyword: splitIcons.keyword,
                data: storedItem,
            };
            storedItems.push(storedItem);
            splitItems.push(storedSplitItem);
            next();
        });
    }, () => {
        // Create tree
        const tree = createSplitRecordsTree(splitItems);
        // Generate result
        const result = {
            common,
            storage,
            items: storedItems,
            tree,
            icons,
            themes,
        };
        if (iconSet.info) {
            result.info = iconSet.info;
        }
        if (appConfig.enableIconLists) {
            result.apiV2IconsCache = prepareAPIv2IconsList(iconSet, icons);
            if (appConfig.enableSearchEngine && themeParts?.length) {
                result.themeParts = themeParts;
            }
        }
        done(result);
    });
}
/**
 * Promise version of storeLoadedIconSet()
 */
export function asyncStoreLoadedIconSet(iconSet, 
// Optional parameters, can be changed if needed
storage = iconSetsStorage, config = splitIconSetConfig) {
    return new Promise((fulfill) => {
        storeLoadedIconSet(iconSet, (data) => {
            // Purge unused memory if garbage collector global is exposed
            try {
                global.gc?.();
            }
            catch { }
            fulfill(data);
        }, storage, config);
    });
}
