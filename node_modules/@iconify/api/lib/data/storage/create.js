import { appConfig } from '../../config/app.js';
import { cleanupStoredItem } from './cleanup.js';
import { writeStoredItem } from './write.js';
/**
 * Create storage
 */
export function createStorage(config) {
    return {
        config,
        watched: new Set(),
        pendingReads: new Set(),
        pendingWrites: new Set(),
    };
}
/**
 * Create item to store
 */
export function createStoredItem(storage, data, cacheFile, autoCleanup = true, done) {
    const filename = storage.config.cacheDir.replace('{cache}', appConfig.cacheRootDir) + '/' + cacheFile;
    const storedItem = {
        cache: {
            filename,
            exists: false,
        },
        data,
        callbacks: [],
        lastUsed: autoCleanup ? 0 : Date.now(),
    };
    // Save cache if cleanup is enabled
    const storageConfig = storage.config;
    if (storageConfig.maxCount || storageConfig.cleanupAfter) {
        writeStoredItem(storage, storedItem, (err) => {
            if (autoCleanup && !err) {
                // Remove item if not used and not failed
                if (!storedItem.lastUsed) {
                    cleanupStoredItem(storage, storedItem);
                }
            }
            done?.(storedItem, err);
        });
    }
    else {
        done?.(storedItem);
    }
    return storedItem;
}
