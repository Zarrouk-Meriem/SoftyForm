import type { SplitDataTree, SplitRecord, SplitRecordCallback } from '../../types/split.js';
/**
 * Split records into `count` chunks
 *
 * Calls `callback` for each chunk, which should call `next` param to continue splitting.
 * This is done to store data in cache in small chunks when splitting large icon
 * set, allowing memory to be collected after each chunk
 *
 * Calls `done` when done
 */
export declare function splitRecords<T>(data: Record<string, T>, numChunks: number, callback: SplitRecordCallback<Record<string, T>>, done: () => void): void;
/**
 * Create tree for searching split records list
 */
export declare function createSplitRecordsTree<T>(items: SplitRecord<T>[]): SplitDataTree<T>;
/**
 * Find item
 */
export declare function searchSplitRecordsTree<T>(tree: SplitDataTree<T>, keyword: string): T;
/**
 * Find multiple items
 */
export declare function searchSplitRecordsTreeForSet<T>(tree: SplitDataTree<T>, keywords: string[]): Map<T, string[]>;
