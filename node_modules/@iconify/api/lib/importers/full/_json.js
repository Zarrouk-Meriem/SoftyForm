import { readFile } from 'node:fs/promises';
import { matchIconName } from '@iconify/utils/lib/icon/name';
import { DirectoryDownloader } from '../../downloaders/directory.js';
import { createJSONIconSetImporter } from '../icon-set/json.js';
import { createBaseCollectionsListImporter } from '../collections/base.js';
/**
 * Create importer for all .json files in directory
 */
export function _createIconSetsPackageImporter(downloader, options) {
    // Path to import from
    let importPath;
    // Function to create importer
    const createIconSetImporter = (prefix) => {
        if (!importPath) {
            throw new Error('Importer called before path was set');
        }
        return createJSONIconSetImporter(new DirectoryDownloader(importPath), {
            prefix,
            filename: `/json/${prefix}.json`,
        });
    };
    const obj = createBaseCollectionsListImporter(downloader, createIconSetImporter);
    // Load data
    obj._loadCollectionsListFromDirectory = async (path) => {
        importPath = path;
        let prefixes;
        try {
            const data = JSON.parse(await readFile(path + '/collections.json', 'utf8'));
            prefixes = Object.keys(data).filter((prefix) => matchIconName.test(prefix));
            if (!(prefixes instanceof Array)) {
                console.error(`Error loading "collections.json": invalid data`);
                return;
            }
        }
        catch (err) {
            console.error(err);
            return;
        }
        // Filter keys
        const filter = options?.filter;
        if (filter) {
            prefixes = prefixes.filter(filter);
        }
        return prefixes;
    };
    return obj;
}
