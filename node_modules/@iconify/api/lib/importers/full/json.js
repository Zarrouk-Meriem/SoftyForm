import { readFile } from 'node:fs/promises';
import { matchIconName } from '@iconify/utils/lib/icon/name';
import { createBaseImporter } from './base.js';
import { importIconSetFromJSON } from '../common/icon-set-json.js';
/**
 * Create importer for all .json files in directory
 */
export function createIconSetsPackageImporter(downloader, options = {}) {
    const obj = createBaseImporter(downloader);
    // Load collections list
    obj._loadCollectionsListFromDirectory = async (path) => {
        // Log version
        try {
            const packageJSON = JSON.parse(await readFile(path + '/package.json', 'utf8'));
            if (packageJSON.name && packageJSON.version) {
                console.log(`Loading ${packageJSON.name} ${packageJSON.version}`);
            }
        }
        catch {
            //
        }
        // Get prefixes
        let prefixes;
        let data;
        try {
            data = JSON.parse(await readFile(path + '/collections.json', 'utf8'));
            prefixes = Object.keys(data).filter((prefix) => matchIconName.test(prefix));
            if (!(prefixes instanceof Array)) {
                console.error(`Error loading "collections.json": invalid data`);
                return;
            }
        }
        catch (err) {
            console.error(err);
            return;
        }
        // Filter keys
        const filter = options?.filter;
        if (filter) {
            prefixes = prefixes.filter((prefix) => filter(prefix, data[prefix]));
        }
        return prefixes;
    };
    // Load icon set
    obj._loadIconSetFromDirectory = async (prefix, path) => importIconSetFromJSON(prefix, path, '/json/' + prefix + '.json', options);
    return obj;
}
