/**
 * Base full importer
 */
export function createBaseImporter(instance) {
    const obj = instance;
    // Import status
    let importing = false;
    const importIconSets = async (prefixes, callback) => {
        importing = true;
        // Reuse old data
        const data = obj.data || {
            prefixes,
            iconSets: Object.create(null),
        };
        const iconSets = data.iconSets;
        // Parse each prefix
        for (let i = 0; i < prefixes.length; i++) {
            const prefix = prefixes[i];
            const iconSetData = await callback(prefix);
            if (iconSetData) {
                data.iconSets[prefix] = iconSetData;
            }
        }
        // Change status
        importing = false;
        return {
            prefixes,
            iconSets,
        };
    };
    // Import from directory
    obj._loadDataFromDirectory = async (path) => {
        if (!obj._loadCollectionsListFromDirectory) {
            throw new Error('Importer does not implement _loadCollectionsListFromDirectory()');
        }
        const loader = obj._loadIconSetFromDirectory;
        if (!loader) {
            throw new Error('Importer does not implement _loadIconSetFromDirectory()');
        }
        const prefixes = await obj._loadCollectionsListFromDirectory(path);
        if (prefixes) {
            return await importIconSets(prefixes, (prefix) => loader(prefix, path));
        }
    };
    // Custom import
    obj._loadData = async () => {
        if (!obj._loadCollectionsList) {
            throw new Error('Importer does not implement _loadCollectionsList()');
        }
        const loader = obj._loadIconSet;
        if (!loader) {
            throw new Error('Importer does not implement _loadIconSet()');
        }
        const prefixes = await obj._loadCollectionsList();
        if (prefixes) {
            return await importIconSets(prefixes, (prefix) => loader(prefix));
        }
    };
    // Set instance properties
    const baseData = {
        type: 'full',
    };
    Object.assign(obj, baseData);
    return obj;
}
