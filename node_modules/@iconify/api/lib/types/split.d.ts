/**
 * Split records
 */
export interface SplitRecord<T> {
    keyword: string;
    data: T;
}
/**
 * Callback to call to store record
 */
export type SplitRecordCallback<T> = (data: SplitRecord<T>, next: () => void, index: number, total: number) => void;
/**
 * Tree for searching records
 */
interface SplitDataTreeBase<T> {
    split: boolean;
    match: T;
}
interface SplitDataTreeNotSplit<T> extends SplitDataTreeBase<T> {
    split: false;
}
interface SplitDataTreeSplit<T> extends SplitDataTreeBase<T> {
    split: true;
    keyword: string;
    prev?: SplitDataTree<T>;
    next?: SplitDataTree<T>;
}
export type SplitDataTree<T> = SplitDataTreeNotSplit<T> | SplitDataTreeSplit<T>;
export {};
