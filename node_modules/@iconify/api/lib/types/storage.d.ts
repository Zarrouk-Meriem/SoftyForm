/**
 * Cache status
 */
export interface MemoryStorageCache {
    filename: string;
    exists: boolean;
}
/**
 * Callback
 */
export type MemoryStorageCallback<T> = (data: T | null) => void;
/**
 * Stored item state
 */
export interface MemoryStorageItem<T> {
    cache?: MemoryStorageCache;
    callbacks: MemoryStorageCallback<T>[];
    lastUsed: number;
    data?: T;
}
/**
 * Storage configuration
 */
export interface MemoryStorageConfig {
    cacheDir: string;
    maxCount?: number;
    minExpiration?: number;
    timer?: number;
    cleanupAfter?: number;
    asyncRead?: boolean;
    timerCallback?: () => void;
}
/**
 * Storage
 */
export interface MemoryStorage<T> {
    config: MemoryStorageConfig;
    pendingWrites: Set<MemoryStorageItem<T>>;
    pendingReads: Set<MemoryStorageItem<T>>;
    timer?: ReturnType<typeof setTimeout>;
    watched: Set<MemoryStorageItem<T>>;
    minLastUsed?: number;
}
