import type { IconifyInfo, IconifyJSON } from '@iconify/types';
/**
 * Common stuff
 */
interface APIv2CommonParams {
    pretty?: boolean;
}
/**
 * Prefixes list
 *
 * Separated by ','
 * Ends with '-' = partial prefix: 'fa-'
 * Does not end with '-' = full prefix: 'mdi'
 */
type PrefixesMatches = string;
/**
 * Search query string
 *
 * List of queries, split by whitespace. Must match all queries
 * Entry starts with '-': exclude it
 */
type SearchQuery = string;
/**
 * /collections
 */
export interface APIv2CollectionsParams extends APIv2CommonParams {
    version?: 1;
    hidden?: boolean;
    prefixes?: PrefixesMatches;
}
export type APIv2CollectionsResponse = Record<string, IconifyInfo>;
/**
 * /collection
 */
export interface APIv2CollectionParams extends APIv2CommonParams {
    prefix: string;
    info?: boolean;
    aliases?: boolean;
    chars?: boolean;
    hidden?: boolean;
}
export interface APIv2CollectionResponse {
    prefix: string;
    total: number;
    title?: string;
    info?: IconifyInfo;
    uncategorized?: string[];
    categories?: Record<string, string[]>;
    hidden?: string[];
    aliases?: Record<string, string>;
    chars?: Record<string, string>;
    themes?: IconifyJSON['themes'];
    prefixes?: IconifyJSON['prefixes'];
    suffixes?: IconifyJSON['suffixes'];
}
/**
 * /search
 */
export interface APIv2SearchParams extends APIv2CommonParams {
    query: SearchQuery;
    limit?: number;
    min?: number;
    start?: number;
    prefix?: string;
    collection?: string;
    prefixes?: PrefixesMatches;
    category?: string;
    similar?: boolean;
}
export interface APIv2SearchResponse {
    icons: string[];
    total: number;
    limit: number;
    start: number;
    collections: Record<string, IconifyInfo>;
    request: Record<keyof APIv2SearchParams, string>;
}
export {};
